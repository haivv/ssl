<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Quill Editor with Code/View Toggle</title>
  <!-- Link Quill's CSS -->
  <link href="https://cdn.quilljs.com/1.3.6/quill.snow.css" rel="stylesheet">
  <style>
    #editor-container {
      height: 400px;
    }
    #toggle-button {
      margin: 10px 0;
    }
    .ql-syntax {
      background-color: #f0f0f0;
      padding: 10px;
      border-radius: 5px;
      margin: 10px 0;
      white-space: pre-wrap;
    }
  </style>
</head>
<body>
  <!-- Toggle button -->
  <button id="toggle-button">Code/View</button>
  <!-- Create the editor container -->
  <div id="editor-container"></div>

  <!-- Include Quill library -->
  <script src="https://cdn.quilljs.com/1.3.6/quill.js"></script>

  <!-- Initialize Quill editor -->
  <script>
    document.addEventListener('DOMContentLoaded', (event) => {
      var toolbarOptions = [
        ['bold', 'italic', 'underline'],
        [{ 'align': [] }],
        [{ 'size': ['12px', '16px', '20px', '24px', '28px'] }],
        [{ 'list': 'ordered' }, { 'list': 'bullet' }],
        [{ 'header': [1, 2, 3, 4, 5, 6, false] }],
        [{ 'color': [] }],
        [{ 'font': [] }],
        ['image', 'video', 'link'],
      ];

      var quill = new Quill('#editor-container', {
        theme: 'snow',
        placeholder: 'Type your content...',
        modules: {
          toolbar: toolbarOptions,
          syntax: true  // Enable syntax highlighting module
        }
      });

      var isCodeView = false;
      var originalContent = '';

      // Toggle button event listener
      document.getElementById('toggle-button').addEventListener('click', function() {
        if (isCodeView) {
          // Switch to display mode
          quill.setContents(JSON.parse(originalContent));
          this.textContent = 'Code/View';
        } else {
          // Switch to code view
          originalContent = JSON.stringify(quill.getContents());
          quill.clipboard.dangerouslyPasteHTML('<pre class="ql-syntax"><code>' + escapeHtml(originalContent) + '</code></pre>');
          this.textContent = 'Show Rendered';
        }
        isCodeView = !isCodeView;
      });

      // Function to escape HTML
      function escapeHtml(html) {
        var text = document.createTextNode(html);
        var p = document.createElement('p');
        p.appendChild(text);
        return p.innerHTML;
      }

      // Count characters
      function updateCharCount() {
        let contentText = quill.getText();
        let charCount = contentText.length - 1; // Exclude the last newline character
        document.getElementById('charCount').innerText = charCount;
      }

      // Listen to text-change event from Quill editor
      quill.on('text-change', function () {
        updateCharCount();
      });

      // Initial call
      updateCharCount();
    });
  </script>
</body>
</html>
